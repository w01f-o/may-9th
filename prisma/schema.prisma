generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id Int @id @default(autoincrement())

  email    String @unique
  name     String
  password String
  avatar   String
  gender   Gender

  quizResults QuizResult[]
  comments    Comment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Quiz {
  id Int @id @default(autoincrement())

  name String @unique

  questions Question[]
  results   QuizResult[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("quizzes")
}

model Question {
  id Int @id @default(autoincrement())

  text String

  quizId Int
  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  answers             Answer[] @relation(name: "question_answers")
  correctAnswerNumber Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("questions")
}

model Answer {
  id Int @id @default(autoincrement())

  text String

  questionId Int
  question   Question @relation(name: "question_answers", fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("answers")
}

model QuizResult {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  quizId Int
  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  name           String
  score          Int
  quizTotalScore Int
  details        Json

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, quizId])
  @@map("quiz_results")
}

model Movie {
  id Int @id @default(autoincrement())

  name        String
  description String
  thumbnail   String
  preview     String
  video       String

  comments Comment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("movies")
}

model Comment {
  id Int @id @default(autoincrement())

  text String

  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Promotion {
  id Int @id @default(autoincrement())

  thumbnail String
  title     String
  text      String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("promotions")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model HeroCity {
  id Int @id @default(autoincrement())

  name        String
  image       String
  description String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("hero_cities")
}
